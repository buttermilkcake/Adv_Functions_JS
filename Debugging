/*The act of looking over code, understanding what it's doing and figuring out why it's not running as expected, or not running at all.*/
/*Below we are assigning a variable, and it looks like we have an array, it is a nested array and it looks like this code wants to flatten. a is also known as the accumulator, b is the array, since it is iterating over the array. We want the accumulator to start off with an empty array. So the accumulator is going to be an empty array when we start off.*/
const flattened = [[0,1], [2,3] [4,5]].reduce(
	(a,b) => a.concat(b), []);

const flattened = [[0,1], [2,3] [4,5]].reduce(
	(accumulator,array) => accumulator.concat(array), []);

/*picking up from above. We're going to do empty array.concat. Concat attaches the contents of an array into whatever is being concatted.*/
const flattened = [[0,1], [2,3] [4,5]].reduce(
	(accumulator,array) => [].concat(array), []);


/*There will be 3 loopings. In the first looping, the array is 0,1 and the accumulator is the empty array, then we see the 2nd loop around, the 2,3 array, and the accumulator now has 0,1. So after the 1st loop thru, the 0,1 are added into the empty array, which is the accumulator.The last pass thru, which is 4,5 and they are attached to the accumulator which now has 0,1,2,3. So it looks like what we're doing is grabbing each array and we're adding it into the accumulator. We're just using the concat function to join the arrays, so we are flattening the array and removing the nested arrays.*/
const flattened = [[0,1], [2,3] [4,5]].reduce(
	(accumulator,array) => {
	console.log('array', array)
	console.log('accumulator', accumulator)
		return accumulator.concat(array)
	}, []);

/*Instead of using console log, we can use something called debugger. Debugger is a JS keyword. Debugger tells whatever is reading the file to just stop when it sees the word debugger and it opens up for us in the window exactly where it stopped. You can hit play or stepover(which looks like a formatta) if you hit step over, it goes to the next line and computes the next line of code and you can keep stepping thru this until it's done*/
const flattened = [[0,1], [2,3] [4,5]].reduce(
	(accumulator,array) => { 
	debugger; 
	return accumulator.concat(array)
	}, []);
